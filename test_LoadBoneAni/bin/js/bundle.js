var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/runtime/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameUI":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 5, 5);
exports.CameraInitRot = new Laya.Vector3(-5, 0, 0);
/** player */
exports.PlayerResUrl = "res/human.lh";
exports.PlayerInitPos = new Laya.Vector3(-0.05, 0, 4.3);
exports.PlayerInitRot = new Laya.Vector3(90, 160, 0);
exports.PlayerInitScale = new Laya.Vector3(20, 20, 20);
exports.PlayerShootLifeTime = 10;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BulletScript = /** @class */ (function (_super) {
    __extends(BulletScript, _super);
    function BulletScript() {
        var _this = _super.call(this) || this;
        /**子弹生命周期**/
        _this.lifetime = 180;
        /**子弹发射的速度（方向）**/
        _this.speedV3 = new Laya.Vector3();
        _this.power = 10;
        return _this;
    }
    BulletScript.prototype.onAwake = function () {
        this.bullet = this.owner;
    };
    /** 设置子弹射击方向并计算速度 */
    BulletScript.prototype.setDirection = function (origin, direction) {
        /****
         * 注：
         * 三维向量即是位置、方向，也可以是速度，但速度需要一个统一的参考衡量标准，比如“N*标准速度值/帧”或
         * “N*标准速度值/毫秒”，它类似于“N*米/帧”。
         * 而我们得到的方向向量，它的大小不一，无法作为标准速度值使用，这个时候可用Vector3.normalize()方法
         * 把任一向量归一化，产生单位为一的向量作为标准速度值，再把它进行缩放作为不同物体的速度来使用，比如
         * 0.2倍标准速度值，1.5倍标准速度值等，可使用Vector3.scale()方法缩放。
         ****/
        // 设置初始位置
        this.bullet.transform.localPosition = origin.clone();
        //将方向向量归一成单位为一的方向速度向量(在LayaAir中相当于1米的长度)
        Laya.Vector3.normalize(direction, this.speedV3);
        //用缩放方法去调整发射速度，0.2倍标准速度（注：子弹速度过快，可能会越过场景中物品，不发生碰撞！）
        Laya.Vector3.scale(this.speedV3, 0.08, this.speedV3);
    };
    BulletScript.prototype.onUpdate = function () {
        var _this = this;
        //子弹位置更新
        this.bullet.transform.translate(this.speedV3, false);
        //生命周期递减
        this.lifetime--;
        //生命周期结束后，一帧后销毁子弹
        if (this.lifetime < 0) {
            Laya.timer.frameOnce(1, this, function () {
                _this.bullet.removeSelf();
            });
        }
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (otherSp.name !== "bullet") {
            console.log("bullet trigger enter: " + otherSp.name);
            Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
        }
    };
    // public onCollisionEnter(collision: Laya.Collision) {
    // }
    /**
     * 当其他碰撞器进入绑定物体碰撞器后逐帧触发（子弹进入物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerStay = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger stay")
        // console.log(otherSp)
    };
    /**
     * 当其他碰撞器退出绑定物体碰撞器时逐帧触发（子弹穿出物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerExit = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger exit")
        // console.log(otherSp)
        //一帧后销毁子弹
        Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
    };
    BulletScript.prototype.broken = function () {
        this.bullet.removeSelf();
    };
    return BulletScript;
}(Laya.Script3D));
exports.default = BulletScript;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var Zombie = /** @class */ (function (_super) {
    __extends(Zombie, _super);
    function Zombie() {
        var _this = _super.call(this) || this;
        _this.moveStep = 0.001;
        _this.isAttacked = false;
        /**被击退的标准速度（方向）**/
        _this.repelledV3 = new Laya.Vector3();
        _this.origin_life = 1000;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    Zombie.prototype.onAwake = function () {
        this.zombie = this.owner;
        this.life = this.origin_life;
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中盒子时）
     * 注：如相对移动速度过快，可能直接越过
     */
    Zombie.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie trigger enter: " + otherSp.name);
            // let shield = this.owner.parent.getChildAt(0).getComponent(ZombieShield);
            // if (shield && shield.isAttacked) {
            //     shield.isAttacked = false;
            //     return;
            // }
            var bullet = other.owner.getComponent(Bullet_1.default);
            //获取子弹速度为
            this.repelledV3 = bullet.speedV3.clone();
            //被攻击速度归一化成单位一向量
            // Laya.Vector3.normalize(this.repelledV3, this.repelledV3);
            this.repelledV3.x /= 10;
            this.repelledV3.y /= 10;
            this.repelledV3.z /= 10;
            //设置为被攻击状态
            this.isAttacked = true;
            this.zombie.transform.localPositionZ -= 0.1;
            // update life
            this.life -= bullet.power;
            console.log("zombie life: " + this.life + "/" + this.origin_life);
            if (this.life <= 0) {
                console.log("zombie died");
                Laya.timer.frameOnce(1, this, function () {
                    this.zombie.removeSelf();
                });
            }
        }
    };
    Zombie.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie collision enter");
        }
    };
    Zombie.prototype.onTriggerStay = function (other) {
        // console.log("zombie trigger stay");
    };
    Zombie.prototype.onTriggerExit = function (other) {
        // console.log("zombie trigger exit");
    };
    Zombie.prototype.onUpdate = function () {
        // 玩家死亡判断, 僵尸与玩家距离过近
        if (this.zombie.transform.localPositionZ > 4.9) {
            console.log("Player died.");
        }
        // 摆正角度
        this.zombie.transform.localRotationEulerX = 0;
        this.zombie.transform.localRotationEulerY = 0;
        this.zombie.transform.localRotationEulerZ = 0;
        // update postion
        if (!this.isAttacked) {
            this.zombie.transform.localPositionZ += this.moveStep;
        }
        // reset
        this.isAttacked = false;
    };
    return Zombie;
}(Laya.Script3D));
exports.default = Zombie;
},{"../component/Bullet":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var ZombieShield = /** @class */ (function (_super) {
    __extends(ZombieShield, _super);
    function ZombieShield() {
        var _this = _super.call(this) || this;
        _this.isAttacked = false;
        _this.origin_life = 100;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    ZombieShield.prototype.onAwake = function () {
        this.zombieShield = this.owner;
        this.life = this.origin_life;
    };
    ZombieShield.prototype.onTriggerEnter = function (other) {
        var _this = this;
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield trigger enter: " + otherSp.name);
            var bullet = other.owner.getComponent(Bullet_1.default);
            // update life
            this.life -= bullet.power;
            console.log("shield life: " + this.life + "/" + this.origin_life);
            this.isAttacked = true;
            if (this.life <= 0) {
                console.log("shield borken");
                Laya.timer.frameOnce(1, this, function () {
                    // play shield broken effect
                    _this.zombieShield.active = false;
                });
            }
            bullet.broken();
        }
    };
    ZombieShield.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield collision enter");
        }
    };
    ZombieShield.prototype.onTriggerStay = function (other) {
        // console.log("shield trigger stay");
    };
    ZombieShield.prototype.onTriggerExit = function (other) {
        // console.log("shield trigger exit");
    };
    ZombieShield.prototype.onUpdate = function () {
        // let zombieCollider: Laya.PhysicsCollider = this.zombieShield.getComponent(Laya.PhysicsCollider);
        // zombieCollider.
    };
    return ZombieShield;
}(Laya.Script3D));
exports.default = ZombieShield;
},{"../component/Bullet":4}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Zombie_1 = require("../component/Zombie");
var ZombieShield_1 = require("../component/ZombieShield");
var Bullet_1 = require("../component/Bullet");
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        _this.bulletRadius = 0.02;
        _this.bulletVelocity = 0.5;
        _this.zombieId = 0;
        _this.shootTime = 0;
        _this.initScene3D();
        _this.initGround();
        _this.initZombie();
        _this.initBullet();
        _this.initPlayer();
        return _this;
    }
    /** intialize scene */
    GameUI.prototype.initScene3D = function () {
        var _this = this;
        // add scene
        this.scene3D = Laya.stage.addChild(new Laya.Scene3D());
        // add camera
        this.camera = (this.scene3D.addChild(new Laya.Camera(0, 0.1, 100)));
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRot.clone();
        // add direction light
        var directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.localRotationEuler = new Laya.Vector3(-45, 0, 0);
        // load game scene
        Laya.Sprite3D.load("res/scene.lh", Laya.Handler.create(this, function (res) {
            _this.gamescene = _this.scene3D.addChild(res);
            _this.gamescene.name = "game_scene";
        }));
    };
    /** initialize player mesh */
    GameUI.prototype.initPlayer = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.PlayerResUrl, Laya.Handler.create(this, function (res) {
            _this.player = res;
            _this.scene3D.addChild(_this.player);
            _this.playerAni = _this.player.getComponent(Laya.Animator);
            _this.player.transform.localPosition = Const.PlayerInitPos.clone();
            _this.player.transform.localRotationEuler = Const.PlayerInitRot.clone();
            _this.player.transform.localScale = Const.PlayerInitScale.clone();
            _this.player.name = "player";
            // mouse click event listen: shoot a bullet
            Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
            // onUpdate
            _this.initGameStage();
        }));
    };
    /** initialize zombie mesh */
    GameUI.prototype.initZombie = function () {
        var _this = this;
        Laya.Sprite3D.load("res/zombie_police.lh", Laya.Handler.create(this, function (res) {
            _this._zombie = res;
            // this.zomnbieAni = this._zombie.getComponent(Laya.Animator);
            _this._zombie.transform.localRotationEulerX += 90;
            _this._zombie.transform.localScale = Const.PlayerInitScale.clone();
            _this._zombie.name = "_zombie";
        }));
    };
    /** initialize bullet mesh */
    GameUI.prototype.initBullet = function () {
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(this.bulletRadius));
        var mat = new Laya.BlinnPhongMaterial();
        mat.albedoColor = new Laya.Vector4(1, 0, 0, 1);
        this._bullet.meshRenderer.material = mat;
        // add collider
        var bulletCollider = this._bullet.addComponent(Laya.PhysicsCollider);
        var bulletColliderShape = new Laya.MeshColliderShape();
        bulletColliderShape.mesh = this._bullet.meshFilter.sharedMesh;
        bulletCollider.colliderShape = bulletColliderShape;
        // 快速移动物体连续检测
        bulletCollider.ccdMotionThreshold = 0.0001;
        bulletCollider.ccdSweptSphereRadius = this.bulletRadius;
        bulletCollider.isTrigger = true;
        // let bulletRigid: Laya.Rigidbody3D = this._bullet.addComponent(Laya.Rigidbody3D);
        // bulletRigid.colliderShape = new Laya.SphereColliderShape(0.02);
        // bulletRigid.gravity = new Laya.Vector3(0, 0, 0);
        // set bullets' original point
        this.bullet_origin = new Laya.Vector3(0, 0, 1);
        this._bullet.name = "_bullet";
    };
    /** initialize ground */
    GameUI.prototype.initGround = function () {
        this.ground = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(20, 20));
        this.scene3D.addChild(this.ground);
        var groundCollider = this.ground.addComponent(Laya.Rigidbody3D);
        var groundColliderShape = new Laya.MeshColliderShape();
        groundColliderShape.mesh = this.ground.meshFilter.sharedMesh;
        groundCollider.colliderShape = groundColliderShape;
        groundCollider.isKinematic = true;
        this.ground.name = "ground";
    };
    /** init game stage: zombie */
    GameUI.prototype.initGameStage = function () {
        var _this = this;
        this.zombieId = 0;
        var cnt = 0;
        // 设置玩家射击动作循环播放
        this.playerAni.getDefaultState().clip.islooping = true;
        this.playerAni.play();
        Laya.timer.frameLoop(1, this, function () {
            // create zombies
            // if (this._zombie && cnt++ % 60 === 0 && this.zombieId < 10) {
            //     this.createZombie();
            //     this.zombieId++;
            // }
            // play shooting animation
            _this.shootTime--;
            if (_this.shootTime < 0) {
                // stop playing
                _this.playerAni.speed = 0;
            }
        });
    };
    /** create a zombie */
    GameUI.prototype.createZombie = function () {
        var zombie = this._zombie.clone();
        this.scene3D.addChild(zombie);
        zombie.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // add zombie body script
        zombie.addComponent(Zombie_1.default);
        // add zombie shield script
        zombie.getChildAt(0).addComponent(ZombieShield_1.default);
        zombie.transform.localPositionX += (Math.random() - 0.5) * 2;
        zombie.name = "zombie_" + this.zombieId;
        console.log("new zombie: " + zombie.name);
        // let zombie1: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie1);
        // zombie1.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie1.addComponent(Zombie);
        // zombie1.getChildAt(0).addComponent(ZombieShield);
        // zombie1.transform.localPositionX += 0.5;
        // zombie1.transform.localRotationEulerY += 90;
        // zombie1.name = "zombie_1";
        // let zombie2: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie2);
        // zombie2.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie2.addComponent(Zombie);
        // zombie2.getChildAt(0).addComponent(ZombieShield);
        // zombie2.transform.localPositionX -= 0.5;
        // zombie2.transform.localPositionY += 0.2;
        // zombie2.transform.localRotationEulerX += 90;
        // zombie2.name = "zombie_2";
    };
    /** mouse click event: shoot a bullet */
    GameUI.prototype.onClick = function () {
        // play shoot animation
        this.shootTime = Const.PlayerShootLifeTime;
        this.playerAni.speed = 1;
        // get ray
        var point = new Laya.Vector2();
        point.x = Laya.MouseManager.instance.mouseX;
        point.y = Laya.MouseManager.instance.mouseY;
        var ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        this.camera.viewportPointToRay(point, ray);
        // raycast detection
        var hitResult = [];
        if (this.scene3D.physicsSimulation.rayCastAll(ray, hitResult, 30)) {
            for (var _i = 0, hitResult_1 = hitResult; _i < hitResult_1.length; _i++) {
                var item = hitResult_1[_i];
                // console.log(item.collider.owner.name);
            }
        }
        // generate bullet
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        var bulletScript = bullet.addComponent(Bullet_1.default);
        bulletScript.setDirection(ray.origin, ray.direction);
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"../Const":3,"../component/Bullet":4,"../component/Zombie":5,"../component/ZombieShield":6,"./../../ui/layaMaxUI":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6L0xheWFBaXJJREVfYmV0YS9yZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvR2FtZUNvbmZpZy50cyIsInNyYy9NYWluLnRzIiwic3JjL3NjcmlwdC9Db25zdC50cyIsInNyYy9zY3JpcHQvY29tcG9uZW50L0J1bGxldC50cyIsInNyYy9zY3JpcHQvY29tcG9uZW50L1pvbWJpZS50cyIsInNyYy9zY3JpcHQvY29tcG9uZW50L1pvbWJpZVNoaWVsZC50cyIsInNyYy9zY3JpcHQvcnVudGltZS9HYW1lVUkudHMiLCJzcmMvdWkvbGF5YU1heFVJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1ZBLGdHQUFnRztBQUNoRyxrREFBNEM7QUFDNUM7O0VBRUU7QUFDRjtJQWFJO0lBQWMsQ0FBQztJQUNSLGVBQUksR0FBWDtRQUNJLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQzdDLEdBQUcsQ0FBQywwQkFBMEIsRUFBQyxnQkFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQWhCTSxnQkFBSyxHQUFRLEdBQUcsQ0FBQztJQUNqQixpQkFBTSxHQUFRLElBQUksQ0FBQztJQUNuQixvQkFBUyxHQUFRLFlBQVksQ0FBQztJQUM5QixxQkFBVSxHQUFRLE1BQU0sQ0FBQztJQUN6QixpQkFBTSxHQUFRLEtBQUssQ0FBQztJQUNwQixpQkFBTSxHQUFRLE1BQU0sQ0FBQztJQUNyQixxQkFBVSxHQUFLLHNCQUFzQixDQUFDO0lBQ3RDLG9CQUFTLEdBQVEsRUFBRSxDQUFDO0lBQ3BCLGdCQUFLLEdBQVMsS0FBSyxDQUFDO0lBQ3BCLGVBQUksR0FBUyxJQUFJLENBQUM7SUFDbEIsdUJBQVksR0FBUyxLQUFLLENBQUM7SUFDM0IsNEJBQWlCLEdBQVMsSUFBSSxDQUFDO0lBTTFD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RSxDQUFDO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNMLGtCQUFDO1FBQUQsQ0FQQSxBQU9DLENBUGdDLEtBQUssR0FPckM7UUFQWSxnQkFBVyxjQU92QixDQUFBO1FBQ0QsR0FBRyxDQUFDLHFCQUFxQixFQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLENBQUMsRUFWZ0IsSUFBSSxHQUFKLE9BQUksS0FBSixPQUFJLFFBVXBCO0FBQUQsQ0FBQyxFQVZhLEVBQUUsR0FBRixVQUFFLEtBQUYsVUFBRSxRQVVmIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xyXG5pbXBvcnQgR2FtZVVJIGZyb20gXCIuL3NjcmlwdC9ydW50aW1lL0dhbWVVSVwiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj02NDA7XHJcbiAgICBzdGF0aWMgaGVpZ2h0Om51bWJlcj0xMTM2O1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9XCJmaXhlZHdpZHRoXCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJub25lXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cInRvcFwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJsZWZ0XCI7XHJcbiAgICBzdGF0aWMgc3RhcnRTY2VuZTphbnk9XCJ0ZXN0L1Rlc3RTY2VuZS5zY2VuZVwiO1xyXG4gICAgc3RhdGljIHNjZW5lUm9vdDpzdHJpbmc9XCJcIjtcclxuICAgIHN0YXRpYyBkZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXQ6Ym9vbGVhbj10cnVlO1xyXG4gICAgc3RhdGljIHBoeXNpY3NEZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIGV4cG9ydFNjZW5lVG9Kc29uOmJvb2xlYW49dHJ1ZTtcclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG4gICAgc3RhdGljIGluaXQoKXtcclxuICAgICAgICB2YXIgcmVnOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcclxuICAgICAgICByZWcoXCJzY3JpcHQvcnVudGltZS9HYW1lVUkudHNcIixHYW1lVUkpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuY2xhc3MgTWFpbiB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcclxuXHRcdGlmICh3aW5kb3dbXCJMYXlhM0RcIl0pIExheWEzRC5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0KTtcclxuXHRcdGVsc2UgTGF5YS5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0LCBMYXlhW1wiV2ViR0xcIl0pO1xyXG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhW1wiRGVidWdQYW5lbFwiXSAmJiBMYXlhW1wiRGVidWdQYW5lbFwiXS5lbmFibGUoKTtcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XHJcblx0XHQvL+WFvOWuueW+ruS/oeS4jeaUr+aMgeWKoOi9vXNjZW5l5ZCO57yA5Zy65pmvXHJcblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XHJcblxyXG5cdFx0Ly/miZPlvIDosIPor5XpnaLmnb/vvIjpgJrov4dJREXorr7nva7osIPor5XmqKHlvI/vvIzmiJbogIV1cmzlnLDlnYDlop7liqBkZWJ1Zz10cnVl5Y+C5pWw77yM5Z2H5Y+v5omT5byA6LCD6K+V6Z2i5p2/77yJXHJcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcucGh5c2ljc0RlYnVnICYmIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdKSBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXS5lbmFibGUoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnN0YXQpIExheWEuU3RhdC5zaG93KCk7XHJcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xyXG5cdH1cclxuXHJcblx0b25WZXJzaW9uTG9hZGVkKCk6IHZvaWQge1xyXG5cdFx0Ly/mv4DmtLvlpKflsI/lm77mmKDlsITvvIzliqDovb3lsI/lm77nmoTml7blgJnvvIzlpoLmnpzlj5HnjrDlsI/lm77lnKjlpKflm77lkIjpm4bph4zpnaLvvIzliJnkvJjlhYjliqDovb3lpKflm77lkIjpm4bvvIzogIzkuI3mmK/lsI/lm75cclxuXHRcdExheWEuQXRsYXNJbmZvTWFuYWdlci5lbmFibGUoXCJmaWxlY29uZmlnLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uQ29uZmlnTG9hZGVkKSk7XHJcblx0fVxyXG5cclxuXHRvbkNvbmZpZ0xvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5Yqg6L29SURF5oyH5a6a55qE5Zy65pmvXHJcblx0XHRHYW1lQ29uZmlnLnN0YXJ0U2NlbmUgJiYgTGF5YS5TY2VuZS5vcGVuKEdhbWVDb25maWcuc3RhcnRTY2VuZSk7XHJcblx0fVxyXG59XHJcbi8v5r+A5rS75ZCv5Yqo57G7XHJcbm5ldyBNYWluKCk7XHJcbiIsIi8qKiB2ZXJzaW9uICovXHJcbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjAuMFwiO1xyXG5cclxuLyoqIGNhbWVyYSAqL1xyXG5leHBvcnQgY29uc3QgQ2FtZXJhSW5pdFBvczogTGF5YS5WZWN0b3IzID0gbmV3IExheWEuVmVjdG9yMygwLCA1LCA1KTtcclxuZXhwb3J0IGNvbnN0IENhbWVyYUluaXRSb3Q6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoLTUsIDAsIDApO1xyXG5cclxuLyoqIHBsYXllciAqL1xyXG5leHBvcnQgY29uc3QgUGxheWVyUmVzVXJsOiBzdHJpbmcgPSBcInJlcy9odW1hbi5saFwiO1xyXG5leHBvcnQgY29uc3QgUGxheWVySW5pdFBvczogTGF5YS5WZWN0b3IzID0gbmV3IExheWEuVmVjdG9yMygtMC4wNSwgMCwgNC4zKTtcclxuZXhwb3J0IGNvbnN0IFBsYXllckluaXRSb3Q6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoOTAsIDE2MCwgMCk7XHJcbmV4cG9ydCBjb25zdCBQbGF5ZXJJbml0U2NhbGU6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoMjAsIDIwLCAyMCk7XHJcbmV4cG9ydCBjb25zdCBQbGF5ZXJTaG9vdExpZmVUaW1lOiBudW1iZXIgPSAxMDsiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVsbGV0U2NyaXB0IGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcbiAgICAvKirooqvnu5HlrprnmoTlrZDlvLnlr7nosaEqKi9cclxuICAgIHByaXZhdGUgYnVsbGV0OiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIC8qKuWtkOW8ueeUn+WRveWRqOacnyoqL1xyXG4gICAgcHJpdmF0ZSBsaWZldGltZTogbnVtYmVyID0gMTgwO1xyXG4gICAgLyoq5a2Q5by55Y+R5bCE55qE6YCf5bqm77yI5pa55ZCR77yJKiovXHJcbiAgICBwdWJsaWMgc3BlZWRWMzogTGF5YS5WZWN0b3IzID0gbmV3IExheWEuVmVjdG9yMygpO1xyXG5cclxuICAgIHB1YmxpYyBwb3dlcjogbnVtYmVyID0gMTA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkF3YWtlKCkge1xyXG4gICAgICAgIHRoaXMuYnVsbGV0ID0gdGhpcy5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u5a2Q5by55bCE5Ye75pa55ZCR5bm26K6h566X6YCf5bqmICovXHJcbiAgICBwdWJsaWMgc2V0RGlyZWN0aW9uKG9yaWdpbjogTGF5YS5WZWN0b3IzLCBkaXJlY3Rpb246IExheWEuVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgICAgIC8qKioqXHJcbiAgICAgICAgICog5rOo77yaXHJcbiAgICAgICAgICog5LiJ57u05ZCR6YeP5Y2z5piv5L2N572u44CB5pa55ZCR77yM5Lmf5Y+v5Lul5piv6YCf5bqm77yM5L2G6YCf5bqm6ZyA6KaB5LiA5Liq57uf5LiA55qE5Y+C6ICD6KGh6YeP5qCH5YeG77yM5q+U5aaC4oCcTirmoIflh4bpgJ/luqblgLwv5bin4oCd5oiWXHJcbiAgICAgICAgICog4oCcTirmoIflh4bpgJ/luqblgLwv5q+r56eS4oCd77yM5a6D57G75Ly85LqO4oCcTirnsbMv5bin4oCd44CCXHJcbiAgICAgICAgICog6ICM5oiR5Lus5b6X5Yiw55qE5pa55ZCR5ZCR6YeP77yM5a6D55qE5aSn5bCP5LiN5LiA77yM5peg5rOV5L2c5Li65qCH5YeG6YCf5bqm5YC85L2/55So77yM6L+Z5Liq5pe25YCZ5Y+v55SoVmVjdG9yMy5ub3JtYWxpemUoKeaWueazlVxyXG4gICAgICAgICAqIOaKiuS7u+S4gOWQkemHj+W9kuS4gOWMlu+8jOS6p+eUn+WNleS9jeS4uuS4gOeahOWQkemHj+S9nOS4uuagh+WHhumAn+W6puWAvO+8jOWGjeaKiuWug+i/m+ihjOe8qeaUvuS9nOS4uuS4jeWQjOeJqeS9k+eahOmAn+W6puadpeS9v+eUqO+8jOavlOWmglxyXG4gICAgICAgICAqIDAuMuWAjeagh+WHhumAn+W6puWAvO+8jDEuNeWAjeagh+WHhumAn+W6puWAvOetie+8jOWPr+S9v+eUqFZlY3RvcjMuc2NhbGUoKeaWueazlee8qeaUvuOAglxyXG4gICAgICAgICAqKioqL1xyXG4gICAgICAgIC8vIOiuvue9ruWIneWni+S9jee9rlxyXG4gICAgICAgIHRoaXMuYnVsbGV0LnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uID0gb3JpZ2luLmNsb25lKCk7XHJcbiAgICAgICAgLy/lsIbmlrnlkJHlkJHph4/lvZLkuIDmiJDljZXkvY3kuLrkuIDnmoTmlrnlkJHpgJ/luqblkJHph48o5ZyoTGF5YUFpcuS4reebuOW9k+S6jjHnsbPnmoTplb/luqYpXHJcbiAgICAgICAgTGF5YS5WZWN0b3IzLm5vcm1hbGl6ZShkaXJlY3Rpb24sIHRoaXMuc3BlZWRWMyk7XHJcbiAgICAgICAgLy/nlKjnvKnmlL7mlrnms5XljrvosIPmlbTlj5HlsITpgJ/luqbvvIwwLjLlgI3moIflh4bpgJ/luqbvvIjms6jvvJrlrZDlvLnpgJ/luqbov4flv6vvvIzlj6/og73kvJrotorov4flnLrmma/kuK3nianlk4HvvIzkuI3lj5HnlJ/norDmkp7vvIHvvIlcclxuICAgICAgICBMYXlhLlZlY3RvcjMuc2NhbGUodGhpcy5zcGVlZFYzLCAwLjA4LCB0aGlzLnNwZWVkVjMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVXBkYXRlKCkge1xyXG4gICAgICAgIC8v5a2Q5by55L2N572u5pu05pawXHJcbiAgICAgICAgdGhpcy5idWxsZXQudHJhbnNmb3JtLnRyYW5zbGF0ZSh0aGlzLnNwZWVkVjMsIGZhbHNlKTtcclxuICAgICAgICAvL+eUn+WRveWRqOacn+mAkuWHj1xyXG4gICAgICAgIHRoaXMubGlmZXRpbWUtLTtcclxuICAgICAgICAvL+eUn+WRveWRqOacn+e7k+adn+WQju+8jOS4gOW4p+WQjumUgOavgeWtkOW8uVxyXG4gICAgICAgIGlmICh0aGlzLmxpZmV0aW1lIDwgMCkge1xyXG4gICAgICAgICAgICBMYXlhLnRpbWVyLmZyYW1lT25jZSgxLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldC5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WFtuS7lueisOaSnuWZqOi/m+WFpee7keWumueJqeS9k+eisOaSnuWZqOaXtuinpuWPke+8iOWtkOW8ueWHu+S4reeJqeWTgeaXtu+8iVxyXG4gICAgICog5rOo77ya5aaC55u45a+556e75Yqo6YCf5bqm6L+H5b+r77yM5Y+v6IO955u05o6l6LaK6L+HXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFbnRlcihvdGhlcjogTGF5YS5QaHlzaWNzQ29tcG9uZW50KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IG90aGVyU3A6IExheWEuTWVzaFNwcml0ZTNEID0gb3RoZXIub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgaWYgKG90aGVyU3AubmFtZSAhPT0gXCJidWxsZXRcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJ1bGxldCB0cmlnZ2VyIGVudGVyOiBcIiArIG90aGVyU3AubmFtZSk7XHJcbiAgICAgICAgICAgIExheWEudGltZXIuZnJhbWVPbmNlKDEsIHRoaXMsIGZ1bmN0aW9uICgpIHsgdGhpcy5idWxsZXQucmVtb3ZlU2VsZigpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIG9uQ29sbGlzaW9uRW50ZXIoY29sbGlzaW9uOiBMYXlhLkNvbGxpc2lvbikge1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b2T5YW25LuW56Kw5pKe5Zmo6L+b5YWl57uR5a6a54mp5L2T56Kw5pKe5Zmo5ZCO6YCQ5bin6Kem5Y+R77yI5a2Q5by56L+b5YWl54mp5ZOB5pe277yJXHJcbiAgICAgKiDms6jvvJrlpoLnm7jlr7nnp7vliqjpgJ/luqbov4flv6vvvIzlj6/og73nm7TmjqXotorov4dcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uVHJpZ2dlclN0YXkob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBvdGhlclNwOiBMYXlhLk1lc2hTcHJpdGUzRCA9IG90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYnVsbGV0IHRyaWdnZXIgc3RheVwiKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG90aGVyU3ApXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOW9k+WFtuS7lueisOaSnuWZqOmAgOWHuue7keWumueJqeS9k+eisOaSnuWZqOaXtumAkOW4p+inpuWPke+8iOWtkOW8ueepv+WHuueJqeWTgeaXtu+8iVxyXG4gICAgICog5rOo77ya5aaC55u45a+556e75Yqo6YCf5bqm6L+H5b+r77yM5Y+v6IO955u05o6l6LaK6L+HXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFeGl0KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgb3RoZXJTcDogTGF5YS5NZXNoU3ByaXRlM0QgPSBvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImJ1bGxldCB0cmlnZ2VyIGV4aXRcIilcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhvdGhlclNwKVxyXG4gICAgICAgIC8v5LiA5bin5ZCO6ZSA5q+B5a2Q5by5XHJcbiAgICAgICAgTGF5YS50aW1lci5mcmFtZU9uY2UoMSwgdGhpcywgZnVuY3Rpb24gKCkgeyB0aGlzLmJ1bGxldC5yZW1vdmVTZWxmKCk7IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBicm9rZW4oKSB7XHJcbiAgICAgICAgdGhpcy5idWxsZXQucmVtb3ZlU2VsZigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5pbXBvcnQgWm9tYmllU2hpZWxkIGZyb20gXCIuL1pvbWJpZVNoaWVsZFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9tYmllIGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcbiAgICBwcml2YXRlIHpvbWJpZTogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICBwcml2YXRlIG1vdmVTdGVwOiBudW1iZXIgPSAwLjAwMTtcclxuXHJcbiAgICBwcml2YXRlIGlzQXR0YWNrZWQ6IEJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKirooqvlh7vpgIDnmoTmoIflh4bpgJ/luqbvvIjmlrnlkJHvvIkqKi9cclxuICAgIHB1YmxpYyByZXBlbGxlZFYzOiBMYXlhLlZlY3RvcjMgPSBuZXcgTGF5YS5WZWN0b3IzKCk7XHJcblxyXG4gICAgcHVibGljIG9yaWdpbl9saWZlOiBudW1iZXIgPSAxMDAwO1xyXG4gICAgcHVibGljIGxpZmU6IG51bWJlcjtcclxuXHJcbiAgICAvKiog56Kw5pKe5qOA5rWL55m95ZCN5Y2VICovXHJcbiAgICBwcml2YXRlIGNvbGxpc2lvbldoaXRlTGlzdDogc3RyaW5nW10gPSBbXCJidWxsZXRcIl07XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkF3YWtlKCkge1xyXG4gICAgICAgIHRoaXMuem9tYmllID0gdGhpcy5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICB0aGlzLmxpZmUgPSB0aGlzLm9yaWdpbl9saWZlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b2T5YW25LuW56Kw5pKe5Zmo6L+b5YWl57uR5a6a54mp5L2T56Kw5pKe5Zmo5pe26Kem5Y+R77yI5a2Q5by55Ye75Lit55uS5a2Q5pe277yJXHJcbiAgICAgKiDms6jvvJrlpoLnm7jlr7nnp7vliqjpgJ/luqbov4flv6vvvIzlj6/og73nm7TmjqXotorov4dcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uVHJpZ2dlckVudGVyKG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgb3RoZXJTcDogTGF5YS5NZXNoU3ByaXRlM0QgPSBvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICBpZiAodGhpcy5jb2xsaXNpb25XaGl0ZUxpc3QuaW5kZXhPZihvdGhlclNwLm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ6b21iaWUgdHJpZ2dlciBlbnRlcjogXCIgKyBvdGhlclNwLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbGV0IHNoaWVsZCA9IHRoaXMub3duZXIucGFyZW50LmdldENoaWxkQXQoMCkuZ2V0Q29tcG9uZW50KFpvbWJpZVNoaWVsZCk7XHJcbiAgICAgICAgICAgIC8vIGlmIChzaGllbGQgJiYgc2hpZWxkLmlzQXR0YWNrZWQpIHtcclxuICAgICAgICAgICAgLy8gICAgIHNoaWVsZC5pc0F0dGFja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBidWxsZXQ6IEJ1bGxldCA9IChvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRCkuZ2V0Q29tcG9uZW50KEJ1bGxldCkgYXMgQnVsbGV0O1xyXG4gICAgICAgICAgICAvL+iOt+WPluWtkOW8uemAn+W6puS4ulxyXG4gICAgICAgICAgICB0aGlzLnJlcGVsbGVkVjMgPSBidWxsZXQuc3BlZWRWMy5jbG9uZSgpO1xyXG4gICAgICAgICAgICAvL+iiq+aUu+WHu+mAn+W6puW9kuS4gOWMluaIkOWNleS9jeS4gOWQkemHj1xyXG4gICAgICAgICAgICAvLyBMYXlhLlZlY3RvcjMubm9ybWFsaXplKHRoaXMucmVwZWxsZWRWMywgdGhpcy5yZXBlbGxlZFYzKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBlbGxlZFYzLnggLz0gMTA7XHJcbiAgICAgICAgICAgIHRoaXMucmVwZWxsZWRWMy55IC89IDEwO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGVsbGVkVjMueiAvPSAxMDtcclxuICAgICAgICAgICAgLy/orr7nva7kuLrooqvmlLvlh7vnirbmgIFcclxuICAgICAgICAgICAgdGhpcy5pc0F0dGFja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25aIC09IDAuMTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBsaWZlXHJcbiAgICAgICAgICAgIHRoaXMubGlmZSAtPSBidWxsZXQucG93ZXI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiem9tYmllIGxpZmU6IFwiICsgdGhpcy5saWZlICsgXCIvXCIgKyB0aGlzLm9yaWdpbl9saWZlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlmZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInpvbWJpZSBkaWVkXCIpXHJcbiAgICAgICAgICAgICAgICBMYXlhLnRpbWVyLmZyYW1lT25jZSgxLCB0aGlzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b21iaWUucmVtb3ZlU2VsZigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ29sbGlzaW9uRW50ZXIoY29sbGlzaW9uOiBMYXlhLkNvbGxpc2lvbikge1xyXG4gICAgICAgIGxldCBvdGhlclNwOiBMYXlhLk1lc2hTcHJpdGUzRCA9IGNvbGxpc2lvbi5vdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICBpZiAodGhpcy5jb2xsaXNpb25XaGl0ZUxpc3QuaW5kZXhPZihvdGhlclNwLm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ6b21iaWUgY29sbGlzaW9uIGVudGVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25UcmlnZ2VyU3RheShvdGhlcjogTGF5YS5QaHlzaWNzQ29tcG9uZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ6b21iaWUgdHJpZ2dlciBzdGF5XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFeGl0KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInpvbWJpZSB0cmlnZ2VyIGV4aXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGRhdGUoKSB7XHJcbiAgICAgICAgLy8g546p5a625q275Lqh5Yik5patLCDlg7XlsLjkuI7njqnlrrbot53nprvov4fov5FcclxuICAgICAgICBpZiAodGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25aID4gNC45KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGxheWVyIGRpZWQuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5pGG5q2j6KeS5bqmXHJcbiAgICAgICAgdGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUm90YXRpb25FdWxlclggPSAwO1xyXG4gICAgICAgIHRoaXMuem9tYmllLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXJZID0gMDtcclxuICAgICAgICB0aGlzLnpvbWJpZS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWiA9IDA7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBwb3N0aW9uXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQXR0YWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25aICs9IHRoaXMubW92ZVN0ZXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNldFxyXG4gICAgICAgIHRoaXMuaXNBdHRhY2tlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9tYmllU2hpZWxkIGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcblxyXG4gICAgcHVibGljIHpvbWJpZVNoaWVsZDogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcblxyXG4gICAgcHVibGljIGlzQXR0YWNrZWQ6IEJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgb3JpZ2luX2xpZmU6IG51bWJlciA9IDEwMDtcclxuICAgIHB1YmxpYyBsaWZlOiBudW1iZXI7XHJcblxyXG4gICAgLyoqIOeisOaSnuajgOa1i+eZveWQjeWNlSAqL1xyXG4gICAgcHJpdmF0ZSBjb2xsaXNpb25XaGl0ZUxpc3Q6IHN0cmluZ1tdID0gW1wiYnVsbGV0XCJdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Bd2FrZSgpIHtcclxuICAgICAgICB0aGlzLnpvbWJpZVNoaWVsZCA9IHRoaXMub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgdGhpcy5saWZlID0gdGhpcy5vcmlnaW5fbGlmZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25UcmlnZ2VyRW50ZXIob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBvdGhlclNwOiBMYXlhLk1lc2hTcHJpdGUzRCA9IG90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbldoaXRlTGlzdC5pbmRleE9mKG90aGVyU3AubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCB0cmlnZ2VyIGVudGVyOiBcIiArIG90aGVyU3AubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgYnVsbGV0OiBCdWxsZXQgPSAob3RoZXIub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0QpLmdldENvbXBvbmVudChCdWxsZXQpIGFzIEJ1bGxldDtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGxpZmVcclxuICAgICAgICAgICAgdGhpcy5saWZlIC09IGJ1bGxldC5wb3dlcjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzaGllbGQgbGlmZTogXCIgKyB0aGlzLmxpZmUgKyBcIi9cIiArIHRoaXMub3JpZ2luX2xpZmUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pc0F0dGFja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlmZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCBib3JrZW5cIilcclxuICAgICAgICAgICAgICAgIExheWEudGltZXIuZnJhbWVPbmNlKDEsIHRoaXMsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwbGF5IHNoaWVsZCBicm9rZW4gZWZmZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b21iaWVTaGllbGQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnVsbGV0LmJyb2tlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Db2xsaXNpb25FbnRlcihjb2xsaXNpb246IExheWEuQ29sbGlzaW9uKSB7XHJcbiAgICAgICAgbGV0IG90aGVyU3A6IExheWEuTWVzaFNwcml0ZTNEID0gY29sbGlzaW9uLm90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbldoaXRlTGlzdC5pbmRleE9mKG90aGVyU3AubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCBjb2xsaXNpb24gZW50ZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblRyaWdnZXJTdGF5KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNoaWVsZCB0cmlnZ2VyIHN0YXlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uVHJpZ2dlckV4aXQob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2hpZWxkIHRyaWdnZXIgZXhpdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpIHtcclxuICAgICAgICAvLyBsZXQgem9tYmllQ29sbGlkZXI6IExheWEuUGh5c2ljc0NvbGxpZGVyID0gdGhpcy56b21iaWVTaGllbGQuZ2V0Q29tcG9uZW50KExheWEuUGh5c2ljc0NvbGxpZGVyKTtcclxuICAgICAgICAvLyB6b21iaWVDb2xsaWRlci5cclxuICAgIH1cclxufSIsImltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCAqIGFzIENvbnN0IGZyb20gXCIuLi9Db25zdFwiO1xyXG5pbXBvcnQgWm9tYmllIGZyb20gXCIuLi9jb21wb25lbnQvWm9tYmllXCI7XHJcbmltcG9ydCBab21iaWVTaGllbGQgZnJvbSBcIi4uL2NvbXBvbmVudC9ab21iaWVTaGllbGRcIjtcclxuaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVVJIGV4dGVuZHMgdWkudGVzdC5UZXN0U2NlbmVVSSB7XHJcbiAgICBwcml2YXRlIHNjZW5lM0Q6IExheWEuU2NlbmUzRDtcclxuXHJcbiAgICBwcml2YXRlIGNhbWVyYTogTGF5YS5DYW1lcmE7XHJcblxyXG4gICAgLyoqIGdhbWUgc2NlbmUgKi9cclxuICAgIHByaXZhdGUgZ3JvdW5kOiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIHByaXZhdGUgZ2FtZXNjZW5lOiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuXHJcbiAgICAvKiogYnVsbGV0ICovXHJcbiAgICBwcml2YXRlIF9idWxsZXQ6IExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHJpdmF0ZSBidWxsZXRSYWRpdXM6IG51bWJlciA9IDAuMDI7XHJcbiAgICBwcml2YXRlIGJ1bGxldFZlbG9jaXR5OiBudW1iZXIgPSAwLjU7XHJcbiAgICBwcml2YXRlIGJ1bGxldF9vcmlnaW46IExheWEuVmVjdG9yMztcclxuXHJcbiAgICAvKiogem9tYmllICovXHJcbiAgICBwcml2YXRlIF96b21iaWU6IExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHJpdmF0ZSB6b21uYmllQW5pOiBMYXlhLkFuaW1hdG9yO1xyXG4gICAgcHJpdmF0ZSB6b21iaWVJZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKiogcGxheWVyICovXHJcbiAgICBwcml2YXRlIHBsYXllcjogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICBwcml2YXRlIHBsYXllckFuaTogTGF5YS5BbmltYXRvcjtcclxuICAgIHByaXZhdGUgc2hvb3RUaW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFNjZW5lM0QoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0R3JvdW5kKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFpvbWJpZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRCdWxsZXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0UGxheWVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGludGlhbGl6ZSBzY2VuZSAqL1xyXG4gICAgcHJpdmF0ZSBpbml0U2NlbmUzRCgpIHtcclxuICAgICAgICAvLyBhZGQgc2NlbmVcclxuICAgICAgICB0aGlzLnNjZW5lM0QgPSBMYXlhLnN0YWdlLmFkZENoaWxkKG5ldyBMYXlhLlNjZW5lM0QoKSkgYXMgTGF5YS5TY2VuZTNEO1xyXG5cclxuICAgICAgICAvLyBhZGQgY2FtZXJhXHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSAodGhpcy5zY2VuZTNELmFkZENoaWxkKG5ldyBMYXlhLkNhbWVyYSgwLCAwLjEsIDEwMCkpKSBhcyBMYXlhLkNhbWVyYTtcclxuICAgICAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvbiA9IENvbnN0LkNhbWVyYUluaXRQb3MuY2xvbmUoKTtcclxuICAgICAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyID0gQ29uc3QuQ2FtZXJhSW5pdFJvdC5jbG9uZSgpO1xyXG5cclxuICAgICAgICAvLyBhZGQgZGlyZWN0aW9uIGxpZ2h0XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbkxpZ2h0OiBMYXlhLkRpcmVjdGlvbkxpZ2h0ID0gdGhpcy5zY2VuZTNELmFkZENoaWxkKG5ldyBMYXlhLkRpcmVjdGlvbkxpZ2h0KCkpIGFzIExheWEuRGlyZWN0aW9uTGlnaHQ7XHJcbiAgICAgICAgZGlyZWN0aW9uTGlnaHQuY29sb3IgPSBuZXcgTGF5YS5WZWN0b3IzKDAuNiwgMC42LCAwLjYpO1xyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXIgPSBuZXcgTGF5YS5WZWN0b3IzKC00NSwgMCwgMCk7XHJcblxyXG4gICAgICAgIC8vIGxvYWQgZ2FtZSBzY2VuZVxyXG4gICAgICAgIExheWEuU3ByaXRlM0QubG9hZChcInJlcy9zY2VuZS5saFwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIChyZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lc2NlbmUgPSB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQocmVzKSBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICAgICAgdGhpcy5nYW1lc2NlbmUubmFtZSA9IFwiZ2FtZV9zY2VuZVwiO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSBwbGF5ZXIgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0UGxheWVyKCkge1xyXG4gICAgICAgIExheWEuU3ByaXRlM0QubG9hZChDb25zdC5QbGF5ZXJSZXNVcmwsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKHJlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllciA9IHJlcztcclxuICAgICAgICAgICAgdGhpcy5zY2VuZTNELmFkZENoaWxkKHRoaXMucGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmkgPSB0aGlzLnBsYXllci5nZXRDb21wb25lbnQoTGF5YS5BbmltYXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uID0gQ29uc3QuUGxheWVySW5pdFBvcy5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyID0gQ29uc3QuUGxheWVySW5pdFJvdC5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci50cmFuc2Zvcm0ubG9jYWxTY2FsZSA9IENvbnN0LlBsYXllckluaXRTY2FsZS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIubmFtZSA9IFwicGxheWVyXCI7XHJcblxyXG4gICAgICAgICAgICAvLyBtb3VzZSBjbGljayBldmVudCBsaXN0ZW46IHNob290IGEgYnVsbGV0XHJcbiAgICAgICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5vbkNsaWNrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG9uVXBkYXRlXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEdhbWVTdGFnZSgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSB6b21iaWUgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0Wm9tYmllKCkge1xyXG4gICAgICAgIExheWEuU3ByaXRlM0QubG9hZChcInJlcy96b21iaWVfcG9saWNlLmxoXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKHJlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl96b21iaWUgPSByZXM7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuem9tbmJpZUFuaSA9IHRoaXMuX3pvbWJpZS5nZXRDb21wb25lbnQoTGF5YS5BbmltYXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3pvbWJpZS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWCArPSA5MDtcclxuICAgICAgICAgICAgdGhpcy5fem9tYmllLnRyYW5zZm9ybS5sb2NhbFNjYWxlID0gQ29uc3QuUGxheWVySW5pdFNjYWxlLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl96b21iaWUubmFtZSA9IFwiX3pvbWJpZVwiO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSBidWxsZXQgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0QnVsbGV0KCkge1xyXG4gICAgICAgIHRoaXMuX2J1bGxldCA9IG5ldyBMYXlhLk1lc2hTcHJpdGUzRChMYXlhLlByaW1pdGl2ZU1lc2guY3JlYXRlU3BoZXJlKHRoaXMuYnVsbGV0UmFkaXVzKSk7XHJcbiAgICAgICAgbGV0IG1hdDogTGF5YS5CbGlublBob25nTWF0ZXJpYWwgPSBuZXcgTGF5YS5CbGlublBob25nTWF0ZXJpYWwoKTtcclxuICAgICAgICBtYXQuYWxiZWRvQ29sb3IgPSBuZXcgTGF5YS5WZWN0b3I0KDEsIDAsIDAsIDEpO1xyXG4gICAgICAgIHRoaXMuX2J1bGxldC5tZXNoUmVuZGVyZXIubWF0ZXJpYWwgPSBtYXQ7XHJcbiAgICAgICAgLy8gYWRkIGNvbGxpZGVyXHJcbiAgICAgICAgbGV0IGJ1bGxldENvbGxpZGVyOiBMYXlhLlBoeXNpY3NDb2xsaWRlciA9IHRoaXMuX2J1bGxldC5hZGRDb21wb25lbnQoTGF5YS5QaHlzaWNzQ29sbGlkZXIpO1xyXG4gICAgICAgIGxldCBidWxsZXRDb2xsaWRlclNoYXBlOiBMYXlhLk1lc2hDb2xsaWRlclNoYXBlID0gbmV3IExheWEuTWVzaENvbGxpZGVyU2hhcGUoKTtcclxuICAgICAgICBidWxsZXRDb2xsaWRlclNoYXBlLm1lc2ggPSB0aGlzLl9idWxsZXQubWVzaEZpbHRlci5zaGFyZWRNZXNoO1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmNvbGxpZGVyU2hhcGUgPSBidWxsZXRDb2xsaWRlclNoYXBlO1xyXG4gICAgICAgIC8vIOW/q+mAn+enu+WKqOeJqeS9k+i/nue7reajgOa1i1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmNjZE1vdGlvblRocmVzaG9sZCA9IDAuMDAwMTtcclxuICAgICAgICBidWxsZXRDb2xsaWRlci5jY2RTd2VwdFNwaGVyZVJhZGl1cyA9IHRoaXMuYnVsbGV0UmFkaXVzO1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmlzVHJpZ2dlciA9IHRydWU7XHJcbiAgICAgICAgLy8gbGV0IGJ1bGxldFJpZ2lkOiBMYXlhLlJpZ2lkYm9keTNEID0gdGhpcy5fYnVsbGV0LmFkZENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKTtcclxuICAgICAgICAvLyBidWxsZXRSaWdpZC5jb2xsaWRlclNoYXBlID0gbmV3IExheWEuU3BoZXJlQ29sbGlkZXJTaGFwZSgwLjAyKTtcclxuICAgICAgICAvLyBidWxsZXRSaWdpZC5ncmF2aXR5ID0gbmV3IExheWEuVmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAvLyBzZXQgYnVsbGV0cycgb3JpZ2luYWwgcG9pbnRcclxuICAgICAgICB0aGlzLmJ1bGxldF9vcmlnaW4gPSBuZXcgTGF5YS5WZWN0b3IzKDAsIDAsIDEpO1xyXG5cclxuICAgICAgICB0aGlzLl9idWxsZXQubmFtZSA9IFwiX2J1bGxldFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBpbml0aWFsaXplIGdyb3VuZCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0R3JvdW5kKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdW5kID0gbmV3IExheWEuTWVzaFNwcml0ZTNEKExheWEuUHJpbWl0aXZlTWVzaC5jcmVhdGVQbGFuZSgyMCwgMjApKTtcclxuICAgICAgICB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQodGhpcy5ncm91bmQpO1xyXG4gICAgICAgIGxldCBncm91bmRDb2xsaWRlcjogTGF5YS5SaWdpZGJvZHkzRCA9IHRoaXMuZ3JvdW5kLmFkZENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKTtcclxuICAgICAgICBsZXQgZ3JvdW5kQ29sbGlkZXJTaGFwZTogTGF5YS5NZXNoQ29sbGlkZXJTaGFwZSA9IG5ldyBMYXlhLk1lc2hDb2xsaWRlclNoYXBlKCk7XHJcbiAgICAgICAgZ3JvdW5kQ29sbGlkZXJTaGFwZS5tZXNoID0gdGhpcy5ncm91bmQubWVzaEZpbHRlci5zaGFyZWRNZXNoO1xyXG4gICAgICAgIGdyb3VuZENvbGxpZGVyLmNvbGxpZGVyU2hhcGUgPSBncm91bmRDb2xsaWRlclNoYXBlO1xyXG4gICAgICAgIGdyb3VuZENvbGxpZGVyLmlzS2luZW1hdGljID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5ncm91bmQubmFtZSA9IFwiZ3JvdW5kXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGluaXQgZ2FtZSBzdGFnZTogem9tYmllICovXHJcbiAgICBwcml2YXRlIGluaXRHYW1lU3RhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy56b21iaWVJZCA9IDA7XHJcbiAgICAgICAgbGV0IGNudCA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g6K6+572u546p5a625bCE5Ye75Yqo5L2c5b6q546v5pKt5pS+XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJBbmkuZ2V0RGVmYXVsdFN0YXRlKCkuY2xpcC5pc2xvb3BpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGxheWVyQW5pLnBsYXkoKTtcclxuICAgICAgICBMYXlhLnRpbWVyLmZyYW1lTG9vcCgxLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB6b21iaWVzXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLl96b21iaWUgJiYgY250KysgJSA2MCA9PT0gMCAmJiB0aGlzLnpvbWJpZUlkIDwgMTApIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuY3JlYXRlWm9tYmllKCk7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnpvbWJpZUlkKys7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHBsYXkgc2hvb3RpbmcgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuc2hvb3RUaW1lLS07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob290VGltZSA8IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgcGxheWluZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmkuc3BlZWQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGNyZWF0ZSBhIHpvbWJpZSAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVab21iaWUoKSB7XHJcbiAgICAgICAgbGV0IHpvbWJpZTogTGF5YS5NZXNoU3ByaXRlM0QgPSB0aGlzLl96b21iaWUuY2xvbmUoKTtcclxuICAgICAgICB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQoem9tYmllKTtcclxuICAgICAgICB6b21iaWUuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRib2R5M0QpLmlzS2luZW1hdGljID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHpvbWJpZSBib2R5IHNjcmlwdFxyXG4gICAgICAgIHpvbWJpZS5hZGRDb21wb25lbnQoWm9tYmllKTtcclxuICAgICAgICAvLyBhZGQgem9tYmllIHNoaWVsZCBzY3JpcHRcclxuICAgICAgICB6b21iaWUuZ2V0Q2hpbGRBdCgwKS5hZGRDb21wb25lbnQoWm9tYmllU2hpZWxkKTtcclxuXHJcbiAgICAgICAgem9tYmllLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uWCArPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyO1xyXG5cclxuICAgICAgICB6b21iaWUubmFtZSA9IFwiem9tYmllX1wiICsgdGhpcy56b21iaWVJZDtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJuZXcgem9tYmllOiBcIiArIHpvbWJpZS5uYW1lKTtcclxuXHJcbiAgICAgICAgLy8gbGV0IHpvbWJpZTE6IExheWEuTWVzaFNwcml0ZTNEID0gdGhpcy5fem9tYmllLmNsb25lKCk7XHJcbiAgICAgICAgLy8gdGhpcy5zY2VuZTNELmFkZENoaWxkKHpvbWJpZTEpO1xyXG4gICAgICAgIC8vIHpvbWJpZTEuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRib2R5M0QpLmlzS2luZW1hdGljID0gdHJ1ZTtcclxuICAgICAgICAvLyB6b21iaWUxLmFkZENvbXBvbmVudChab21iaWUpO1xyXG4gICAgICAgIC8vIHpvbWJpZTEuZ2V0Q2hpbGRBdCgwKS5hZGRDb21wb25lbnQoWm9tYmllU2hpZWxkKTtcclxuICAgICAgICAvLyB6b21iaWUxLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uWCArPSAwLjU7XHJcbiAgICAgICAgLy8gem9tYmllMS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWSArPSA5MDtcclxuICAgICAgICAvLyB6b21iaWUxLm5hbWUgPSBcInpvbWJpZV8xXCI7XHJcblxyXG4gICAgICAgIC8vIGxldCB6b21iaWUyOiBMYXlhLk1lc2hTcHJpdGUzRCA9IHRoaXMuX3pvbWJpZS5jbG9uZSgpO1xyXG4gICAgICAgIC8vIHRoaXMuc2NlbmUzRC5hZGRDaGlsZCh6b21iaWUyKTtcclxuICAgICAgICAvLyB6b21iaWUyLmdldENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKS5pc0tpbmVtYXRpYyA9IHRydWU7XHJcbiAgICAgICAgLy8gem9tYmllMi5hZGRDb21wb25lbnQoWm9tYmllKTtcclxuICAgICAgICAvLyB6b21iaWUyLmdldENoaWxkQXQoMCkuYWRkQ29tcG9uZW50KFpvbWJpZVNoaWVsZCk7XHJcbiAgICAgICAgLy8gem9tYmllMi50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvblggLT0gMC41O1xyXG4gICAgICAgIC8vIHpvbWJpZTIudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25ZICs9IDAuMjtcclxuICAgICAgICAvLyB6b21iaWUyLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXJYICs9IDkwO1xyXG4gICAgICAgIC8vIHpvbWJpZTIubmFtZSA9IFwiem9tYmllXzJcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogbW91c2UgY2xpY2sgZXZlbnQ6IHNob290IGEgYnVsbGV0ICovXHJcbiAgICBwcml2YXRlIG9uQ2xpY2soKSB7XHJcbiAgICAgICAgLy8gcGxheSBzaG9vdCBhbmltYXRpb25cclxuICAgICAgICB0aGlzLnNob290VGltZSA9IENvbnN0LlBsYXllclNob290TGlmZVRpbWU7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJBbmkuc3BlZWQgPSAxO1xyXG5cclxuICAgICAgICAvLyBnZXQgcmF5XHJcbiAgICAgICAgbGV0IHBvaW50OiBMYXlhLlZlY3RvcjIgPSBuZXcgTGF5YS5WZWN0b3IyKCk7XHJcbiAgICAgICAgcG9pbnQueCA9IExheWEuTW91c2VNYW5hZ2VyLmluc3RhbmNlLm1vdXNlWDtcclxuICAgICAgICBwb2ludC55ID0gTGF5YS5Nb3VzZU1hbmFnZXIuaW5zdGFuY2UubW91c2VZO1xyXG4gICAgICAgIGxldCByYXk6IExheWEuUmF5ID0gbmV3IExheWEuUmF5KG5ldyBMYXlhLlZlY3RvcjMoMCwgMCwgMCksIG5ldyBMYXlhLlZlY3RvcjMoMCwgMCwgMCkpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnZpZXdwb3J0UG9pbnRUb1JheShwb2ludCwgcmF5KTtcclxuXHJcbiAgICAgICAgLy8gcmF5Y2FzdCBkZXRlY3Rpb25cclxuICAgICAgICBsZXQgaGl0UmVzdWx0OiBMYXlhLkhpdFJlc3VsdFtdID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuc2NlbmUzRC5waHlzaWNzU2ltdWxhdGlvbi5yYXlDYXN0QWxsKHJheSwgaGl0UmVzdWx0LCAzMCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBoaXRSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0uY29sbGlkZXIub3duZXIubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdlbmVyYXRlIGJ1bGxldFxyXG4gICAgICAgIGxldCBidWxsZXQ6IExheWEuTWVzaFNwcml0ZTNEID0gdGhpcy5fYnVsbGV0LmNsb25lKCk7XHJcbiAgICAgICAgYnVsbGV0Lm5hbWUgPSBcImJ1bGxldFwiO1xyXG4gICAgICAgIHRoaXMuc2NlbmUzRC5hZGRDaGlsZChidWxsZXQpO1xyXG4gICAgICAgIGxldCBidWxsZXRTY3JpcHQgPSBidWxsZXQuYWRkQ29tcG9uZW50KEJ1bGxldCk7XHJcbiAgICAgICAgYnVsbGV0U2NyaXB0LnNldERpcmVjdGlvbihyYXkub3JpZ2luLCByYXkuZGlyZWN0aW9uKTtcclxuICAgIH1cclxufSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xuaW1wb3J0IFZpZXc9TGF5YS5WaWV3O1xyXG5pbXBvcnQgRGlhbG9nPUxheWEuRGlhbG9nO1xyXG5pbXBvcnQgU2NlbmU9TGF5YS5TY2VuZTtcbnZhciBSRUc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xuZXhwb3J0IG1vZHVsZSB1aS50ZXN0IHtcclxuICAgIGV4cG9ydCBjbGFzcyBUZXN0U2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuXHRcdHB1YmxpYyBidG46TGF5YS5CdXR0b247XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7IHN1cGVyKCl9XHJcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4oKTp2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuY3JlYXRlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkU2NlbmUoXCJ0ZXN0L1Rlc3RTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSRUcoXCJ1aS50ZXN0LlRlc3RTY2VuZVVJXCIsVGVzdFNjZW5lVUkpO1xyXG59XHIiXX0=
